package com.estetify.backend.models.PaymentMethod;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Enum que representa os tipos de m√©todos de pagamento aceitos pelo sistema Estetify.
 */
public enum PaymentType {

    CREDIT_CARD("CREDIT_CARD", "Cart√£o de Cr√©dito", true, "üí≥"),
    DEBIT_CARD("DEBIT_CARD", "Cart√£o de D√©bito", false, "üè¶"),
    PIX("PIX", "Pix", false, "üîÅ"),
    BOLETO("BOLETO", "Boleto Banc√°rio", false, "üßæ"),
    PAYPAL("PAYPAL", "PayPal", true, "üåê"),
    TRANSFER("TRANSFER", "Transfer√™ncia Banc√°ria", false, "üí∏");

    private final String code;
    private final String displayName;
    private final boolean allowsInstallments;
    private final String icon;

    PaymentType(String code, String displayName, boolean allowsInstallments, String icon) {
        this.code = code;
        this.displayName = displayName;
        this.allowsInstallments = allowsInstallments;
        this.icon = icon;
    }

    /**
     * Retorna o c√≥digo t√©cnico do m√©todo de pagamento.
     */
    @JsonValue
    public String getCode() {
        return code;
    }

    /**
     * Nome leg√≠vel para exibi√ß√£o ao usu√°rio.
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Retorna se permite parcelamento.
     */
    public boolean allowsInstallments() {
        return allowsInstallments;
    }

    /**
     * √çcone ou emoji representativo do m√©todo.
     */
    public String getIcon() {
        return icon;
    }

    /**
     * Cria um PaymentType a partir do c√≥digo t√©cnico.
     */
    @JsonCreator
    public static PaymentType fromCode(String code) {
        return Arrays.stream(values())
                .filter(type -> type.code.equalsIgnoreCase(code))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("C√≥digo inv√°lido de m√©todo de pagamento: " + code));
    }

    /**
     * Lista todos os m√©todos com seus dados completos (√∫til para front-ends).
     */
    public static List<PaymentType> getAllTypes() {
        return Arrays.asList(values());
    }

    /**
     * Lista apenas os nomes amig√°veis de todos os m√©todos.
     */
    public static List<String> getAllDisplayNames() {
        return Arrays.stream(values())
                .map(PaymentType::getDisplayName)
                .collect(Collectors.toList());
    }

    @Override
    public String toString() {
        return icon + " " + displayName;
    }
}
